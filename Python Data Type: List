# 1. Write a Python program to sum all the items in a list.
def sum_list_items(input_list):
    total = 0
    for item in input_list:
        total += item
    return total
my_list = [1, 12, 5, 4, 20]
sum_of_list = sum_list_items(my_list)
print("Sum of all items in the list:", sum_of_list)


# 2. Write a Python program to multiply all the items in a list.
def multiply_list_items(input_list):
    result = 1
    for item in input_list:
        result *= item
    return result
my_list = [1, 2, 2, 2, 2]
product_of_list = multiply_list_items(my_list)
print("Product of all items in the list:", product_of_list)


# 3. Write a Python program to get the largest number from a list.
def get_largest_number(input_list):
    if not input_list:
        return None  # Return None if the list is empty

    max_number = input_list[0]  # Initialize max_number with the first element of the list
    for number in input_list[1:]:
        if number > max_number:
            max_number = number
    return max_number
my_list = [110, 5, 20, 21, 155]
largest_number = get_largest_number(my_list)
print("Largest number in the list:", largest_number)


# 4. Write a Python program to get the smallest number from a list.
def get_smallest_number(input_list):
    if not input_list:
        return None  # Return None if the list is empty

    min_number = input_list[0]  # Initialize min_number with the first element of the list
    for number in input_list[1:]:
        if number < min_number:
            min_number = number
    return min_number
my_list = [10, 5, 20, 8, 15]
smallest_number = get_smallest_number(my_list)
print("Smallest number in the list:", smallest_number)


# 7. Write a Python program to remove duplicates from a list.
def remove_duplicates(input_list):
    # Create an empty list to store unique elements
    unique_list = []
    for item in input_list:
        if item not in unique_list:
            unique_list.append(item)
    return unique_list
my_list = [1, 2, 3, 3, 3, 3, 4, 5, 5, 6, 1]
list_without_duplicates = remove_duplicates(my_list)
print("List without duplicates:", list_without_duplicates)


# 8. Write a Python program to get unique values from a list.
def get_unique_values(input_list):
    # Using set to remove duplicates and then converting back to list
    unique_values = list(set(input_list))
    return unique_values
my_list = [1, 2, 3, 3, 4, 5, 5, 6]
unique_values = get_unique_values(my_list)
print("Unique values from the list:", unique_values)


# 9. Write a Python program to find common items in two lists.
def find_common_items(list1, list2):
    # Convert lists to sets to perform intersection operation
    set1 = set(list1)
    set2 = set(list2)
    # Find the common items by taking the intersection of the sets
    common_items = set1.intersection(set2)
    return list(common_items)
list1 = [1, 2, 3, 4, 5]
list2 = [4, 5, 6, 7, 8]
common_items = find_common_items(list1, list2)
print("Common items in the two lists:", common_items)


# 10. Write a Python program to select the odd items from a list.
def select_odd_items(input_list):
    odd_items = [item for item in input_list if item % 2 != 0]
    return odd_items
my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]
odd_items = select_odd_items(my_list)
print("Odd items from the list:", odd_items)


# 11. Write a Python program to insert an element before each element of a list.
def insert_before_each_element(input_list, element_to_insert):
    result_list = [element_to_insert]
    for item in input_list:
        result_list.append(item)
        result_list.append(element_to_insert)
    return result_list
original_list = [1, 2, 3, 4]
element_to_insert = 0
modified_list = insert_before_each_element(original_list, element_to_insert)
print("Modified list:", modified_list)


# 12. Write a Python program to convert a string to a list.
def string_to_list(input_string):
    return list(input_string)
input_string = "Hello, World!"
converted_list = string_to_list(input_string)
print("Converted list:", converted_list)


# 13. Write a Python program to check whether the n-th element exists in a given list.
def check_nth_element_exists(input_list, n):
    return n < len(input_list)
my_list = [1, 2, 2, 2]
n = 3
if check_nth_element_exists(my_list, n):
    print(f"The {n}-th element exists in the list.")
else:
    print(f"The {n}-th element does not exist in the list.")


# 14. Write a Python program to create a list of empty dictionaries.
def create_empty_dicts_list(n):
    return [{} for _ in range(n)]
num_dicts = 5
empty_dicts_list = create_empty_dicts_list(num_dicts)
print("List of empty dictionaries:", empty_dicts_list)


# 15. Write a Python program to print a list of space-separated elements.
def print_space_separated_elements(input_list):
    print(" ".join(map(str, input_list)))
my_list = [1, 2, 3, 4, 5]
print("List of space-separated elements:")
print_space_separated_elements(my_list)


# 16. Write a Python program to find all the values in a list that are greater than a specified number.
def find_values_greater_than(input_list, threshold):
    return [value for value in input_list if value > threshold]
my_list = [1, 5, 10, 15, 20, 25]
threshold = 10
values_greater_than_threshold = find_values_greater_than(my_list, threshold)
print("Values greater than", threshold, ":", values_greater_than_threshold)


# 17. Write a Python program to extend a list without appending.
Sample data: [10, 20, 30] [40, 50, 60]
def extend_list(original_list, extension_list):
    original_list.extend(extension_list)
original_list = [10, 20, 30]
extension_list = [40, 50, 60]
extend_list(original_list, extension_list)
print("Extended list:", original_list)


# 18.  Write a Python program to count the same pair in three given lists.
Original lists:
[1, 2, 3, 4, 5, 6, 7, 8]
[2, 2, 3, 1, 2, 6, 7, 9]
[2, 1, 3, 1, 2, 6, 7, 9]
Number of same pair of the said three given lists:
3
def count_same_pairs(list1, list2, list3):
    pairs_count = 0
    for item1, item2, item3 in zip(list1, list2, list3):
        if item1 == item2 == item3:
            pairs_count += 1
    return pairs_count
list1 = [1, 2, 3, 4, 5, 6, 7, 8]
list2 = [2, 2, 3, 1, 2, 6, 7, 9]
list3 = [2, 1, 3, 1, 2, 6, 7, 9]

result = count_same_pairs(list1, list2, list3)
print("Number of same pairs in the three lists:", result)


# 19. Write a Python program to extract common index elements from more than one given list.
Original lists:
[1, 1, 3, 4, 5, 6, 7]
[0, 1, 2, 3, 4, 5, 7]
[0, 1, 2, 3, 4, 5, 7]
Common index elements of the said lists:
[1, 7]
def extract_common_index_elements(*lists):
    common_elements = []
    for i in range(len(lists[0])):
        if all(lists[j][i] == lists[0][i] for j in range(1, len(lists))):
            common_elements.append(lists[0][i])
    return common_elements
list1 = [1, 1, 3, 4, 5, 6, 7]
list2 = [0, 1, 2, 3, 4, 5, 7]
list3 = [0, 1, 2, 3, 4, 5, 7]

common_elements = extract_common_index_elements(list1, list2, list3)
print("Common index elements of the said lists:", common_elements)


# 20. Write a Python program to remove the K'th element from a given list, and print the updated list.
Original list:
[1, 1, 2, 3, 4, 4, 5, 1]
After removing an element at the kth position of the said list:
[1, 1, 3, 4, 4, 5, 1]
def remove_kth_element(input_list, k):
    if 0 <= k < len(input_list):
        del input_list[k]
    else:
        print("Invalid index!")
original_list = [1, 2, 9, 3, 4, 4, 5, 1]
k = 2
print("Original list:", original_list)
remove_kth_element(original_list, k)
print("After removing an element at the kth position:", original_list)
