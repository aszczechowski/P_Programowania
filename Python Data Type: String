# 1. Write a Python program to calculate the length of a string.
def calculate_string_length(string):
    return len(string)
input_string = input("Enter a string: ")
length = calculate_string_length(input_string)
print("Length of the string is:", length)


# 2. Write a Python program to count the number of characters (character frequency) in a string.
def count_character_frequency(string):
    frequency = {}
    for char in string:
        if char in frequency:
            frequency[char] += 1
        else:
            frequency[char] = 1
    return frequency
input_string = input("Enter a string: ")
character_frequency = count_character_frequency(input_string)
print("Character frequency in the string:")
for char, freq in character_frequency.items():
    print(f"{char}: {freq}")


# 3. Write a Python program to get a string made of the first 2 and last 2 characters of a given string. If the string length is less than 2, return the empty string instead.
def get_first_and_last_two_chars(string):
    if len(string) < 2:
        return ""
    else:
        return string[:2] + string[-2:]
input_string = input("Enter a string: ")
result = get_first_and_last_two_chars(input_string)
print("Result:", result)


# 4. Write a Python program to get a string from a given string where all occurrences of its first char have been changed to '$', except the first char itself.
def change_first_char_occurrences(string):
    if len(string) < 2:
        return string
    else:
        first_char = string[0]
        modified_string = first_char + string[1:].replace(first_char, '$')
        return modified_string
input_string = input("Enter a string: ")
result = change_first_char_occurrences(input_string)
print("Result:", result)


# 5. Write a Python program to get a single string from two given strings, separated by a space and swap the first two characters of each string.
def swap_first_two_chars(str1, str2):
    new_str1 = str2[:2] + str1[2:]
    new_str2 = str1[:2] + str2[2:]
    return new_str1 + ' ' + new_str2
input_str1 = input("Enter the first string: ")
input_str2 = input("Enter the second string: ")
result = swap_first_two_chars(input_str1, input_str2)
print("Result:", result)


# 6. Write a Python program to add 'ing' at the end of a given string (length should be at least 3). If the given string already ends with 'ing', add 'ly' instead. If the string length of the given string is less than 3, leave it unchanged.
def modify_string(string):
    if len(string) < 3:
        return string
    elif string.endswith('ing'):
        return string + 'ly'
    else:
        return string + 'ing'
input_string = input("Enter a string: ")
result = modify_string(input_string)
print("Result:", result)


# 7. Write a Python program to find the first appearance of the substrings 'not' and 'poor' in a given string. If 'not' follows 'poor', replace the whole 'not'...'poor' substring with 'good'. Return the resulting string.
def replace_not_poor(string):
    not_index = string.find('not')
    poor_index = string.find('poor')

    if not_index != -1 and poor_index != -1 and not_index < poor_index:
        return string[:not_index] + 'good' + string[poor_index + 4:]
    else:
        return string
input_string = input("Enter a string: ")
result = replace_not_poor(input_string)
print("Result:", result)


# 8. Write a Python function that takes a list of words and return the longest word and the length of the longest one.
def find_longest_word(words):
    if not words:
        return None, 0

    longest_word = max(words, key=len)
    length_of_longest_word = len(longest_word)
    return longest_word, length_of_longest_word
word_list = input("Enter words separated by spaces: ").split()
longest_word, length_of_longest_word = find_longest_word(word_list)
print("Longest word:", longest_word)
print("Length of the longest word:", length_of_longest_word)


# 9. Write a Python program to remove the nth index character from a nonempty string.
def remove_nth_character(string, n):
    if not string or n < 0 or n >= len(string):
        return "Invalid input"
    else:
        return string[:n] + string[n+1:]
input_string = input("Enter a string: ")
index = int(input("Enter the index of the character to remove: "))

result = remove_nth_character(input_string, index)
print("Result:", result)


# 10. Write a Python program to change a given string to a newly string where the first and last chars have been exchanged.
def exchange_first_and_last(string):
    if len(string) < 2:
        return string
    else:
        return string[-1] + string[1:-1] + string[0]
input_string = input("Enter a string: ")
result = exchange_first_and_last(input_string)
print("Result:", result)


# 11. Write a Python program to remove characters that have odd index values in a given string.
def remove_odd_index_chars(string):
    return string[::2]
input_string = input("Enter a string: ")
result = remove_odd_index_chars(input_string)
print("Result:", result)


# 12. Write a Python program to count the occurrences of each word in a given sentence.
from collections import Counter
import re

def count_word_occurrences(sentence):
    # Tokenize the sentence into words
    words = re.findall(r'\b\w+\b', sentence.lower())
    # Count the occurrences of each word
    word_counts = Counter(words)
    return word_counts
input_sentence = input("Enter a sentence: ")
occurrences = count_word_occurrences(input_sentence)
print("Occurrences of each word:")
for word, count in occurrences.items():
    print(f"{word}: {count}")


# 13. Write a Python script that takes input from the user and displays that input back in upper and lower cases.
user_input = input("Enter a string: ")
print("Upper case:", user_input.upper())
print("Lower case:", user_input.lower())


# 14. Write a Python function to reverse a string if its length is a multiple of 4.
def reverse_string_if_multiple_of_4(string):
    if len(string) % 4 == 0:
        return string[::-1]
    else:
        return string
input_string = input("Enter a string: ")
result = reverse_string_if_multiple_of_4(input_string)
print("Result:", result)


# 15. Write a Python program to remove a newline in Python
def remove_newline(text):
    return text.rstrip('\n')
input_text = input("Enter a text with newline: ")
result = remove_newline(input_text)
print("Result:", result)


# 16. Write a Python program to add prefix text to all of the lines in a string.
def add_prefix_to_lines(text, prefix):
    lines = text.split('\n')
    prefixed_lines = [prefix + line for line in lines]
    return '\n'.join(prefixed_lines)
input_text = input("Enter some text: ")
prefix = input("Enter the prefix: ")
result = add_prefix_to_lines(input_text, prefix)
print("Result:")
print(result)


# 17. Write a Python program to set the indentation of the first line.
def set_first_line_indentation(text, indentation):
    lines = text.split('\n')
    if lines:
        lines[0] = indentation + lines[0]
    return '\n'.join(lines)
input_text = input("Enter some text: ")
indentation = input("Enter the indentation for the first line: ")
result = set_first_line_indentation(input_text, indentation)
print("Result:")
print(result)


# 18. Write a Python program to format a number with a percentage.
def format_as_percentage(number):
    return "{:.2%}".format(number)
input_number = float(input("Enter a number: "))
formatted_percentage = format_as_percentage(input_number)
print("Formatted percentage:", formatted_percentage)


# 19. Write a Python program to reverse a string.
def reverse_string(string):
    return string[::-1]
input_string = input("Enter a string: ")
reversed_string = reverse_string(input_string)
print("Reversed string:", reversed_string)


# 20. Write a Python program to find the first repeated character in a given string.
def first_repeated_character(string):
    seen = set()
    for char in string:
        if char in seen:
            return char
        seen.add(char)
    return None
input_string = input("Enter a string: ")
result = first_repeated_character(input_string)
if result:
    print("First repeated character:", result)
else:
    print("No repeated characters found.")

