# 1.  Write a Python program to find those numbers which are divisible by 7 and multiples of 5, between 1500 and 2700 (both included).
def find_numbers():
    result = []
    for num in range(1500, 2701):
        if num % 7 == 0 and num % 5 == 0:
            result.append(num)
    return result

divisible_by_7_and_multiple_of_5 = find_numbers()
print("Numbers divisible by 7 and multiples of 5 between 1500 and 2700:")
print(divisible_by_7_and_multiple_of_5)


# 2.  Write a Python program to convert temperatures to and from Celsius and Fahrenheit. [ Formula : c/5 = f-32/9 [ where c = temperature in celsius and f = temperature in fahrenheit ]
# Expected Output :
# 60째C is 140 in Fahrenheit
# 45째F is 7 in Celsius

def celsius_to_fahrenheit(celsius):
    fahrenheit = (celsius * 9/5) + 32
    return fahrenheit

def fahrenheit_to_celsius(fahrenheit):
    celsius = (fahrenheit - 32) * 5/9
    return celsius

celsius_temp = float(input("Enter the temperature in Celsius: "))
fahrenheit_result = celsius_to_fahrenheit(celsius_temp)
print(f"{celsius_temp}째C is {fahrenheit_result} in Fahrenheit")

fahrenheit_temp = float(input("Enter the temperature in Fahrenheit: "))
celsius_result = fahrenheit_to_celsius(fahrenheit_temp)
print(f"{fahrenheit_temp}째F is {celsius_result} in Celsius")


# 3. Write a Python program to guess a number between 1 and 9.
# Note : User is prompted to enter a guess. If the user guesses wrong then the prompt appears again until the guess is correct, on successful guess, user will get a "Well guessed!" message, and the program will exit.
import random

def guess_number():
    target_number = random.randint(1, 9)
    while True:
        guess = int(input("Guess a number between 1 and 9: "))
        if guess == target_number:
            print("Well guessed!")
            break
        else:
            print("Try again!")

guess_number()


# 4. Write a Python program to construct the following pattern, using a nested for loop.

* 
* * 
* * * 
* * * * 
* * * * * 
* * * * 
* * * 
* * 
*

num_rows = 5

for i in range(num_rows):
    for j in range(i + 1):
        print("*", end=" ")
    print()

for i in range(num_rows - 1, 0, -1):
    for j in range(i):
        print("*", end=" ")
    print()


# 5. Write a Python program that accepts a word from the user and reverses it.
def reverse_word(word):
    return word[::-1]

user_word = input("Enter a word: ")

reversed_word = reverse_word(user_word)
print("Reversed word:", reversed_word)


# 6. Write a Python program to print the alphabet pattern 'A'.

def print_alphabet_A():
    print("  ***  ")
    print(" *   * ")
    print(" *   * ")
    print(" ***** ")
    print(" *   * ")
    print(" *   * ")
    print(" *   * ")

print_alphabet_A()


# 7. Write a Python program to print the alphabet pattern 'D'.

def print_alphabet_D():
    print(" **** ")
    print(" *   *")
    print(" *   *")
    print(" *   *")
    print(" *   *")
    print(" *   *")
    print(" **** ")

print_alphabet_D()


# 8. Write a Python program to print the alphabet pattern 'E'.

def print_alphabet_E():
    print(" ***** ")
    print(" *     ")
    print(" *     ")
    print(" ****  ")
    print(" *     ")
    print(" *     ")
    print(" ***** ")

print_alphabet_E()


# 9. Write a Python program to print the alphabet pattern 'G'.
 
def print_alphabet_G():
    print("  ***  ")
    print(" *   * ")
    print(" *     ")
    print(" * *** ")
    print(" *   * ")
    print(" *   * ")
    print("  ***  ")

print_alphabet_G()


# 10. Write a Python program to print the alphabet pattern 'L'.

def print_alphabet_L():
    print(" *      ")
    print(" *      ")
    print(" *      ")
    print(" *      ")
    print(" *      ")
    print(" *      ")
    print(" *****  ")

print_alphabet_L()


# 11. Write a Python program to print the alphabet pattern 'M'.
 
def print_alphabet_M():
    print("  *       *  ")
    print("  *       *  ")
    print("  * *   * *  ")
    print("  *   *   *  ")
    print("  *       *  ")
    print("  *       *  ")
    print("  *       *  ")

print_alphabet_M()


# 12. Write a Python program to print the alphabet pattern 'O'.
  
def print_alphabet_O():
    print("  ***  ")
    print(" *   * ")
    print(" *   * ")
    print(" *   * ")
    print(" *   * ")
    print(" *   * ")
    print("  ***  ")

print_alphabet_O()


# 13. Write a Python program to print the alphabet pattern 'P'.

def print_alphabet_P():
    print("****  ")
    print("*   * ")
    print("*   * ")
    print("****  ")
    print("*     ")
    print("*     ")
    print("*     ")

print_alphabet_P()


# 14. Write a Python program to print the alphabet pattern 'R'.

def print_alphabet_R():
    print("****  ")
    print("*   * ")
    print("*   * ")
    print("****  ")
    print("* *   ")
    print("*  *  ")
    print("*   * ")

print_alphabet_R()


# 15. Write a Python program to print the alphabet pattern 'T'.

def print_alphabet_T():
    print("*******")
    print("   *   ")
    print("   *   ")
    print("   *   ")
    print("   *   ")
    print("   *   ")
    print("   *   ")

print_alphabet_T()


# 16. Write a Python program to print the alphabet pattern 'U'.
                                                                   
def print_alphabet_U():
    print("*   * ")
    print("*   * ")
    print("*   * ")
    print("*   * ")
    print("*   * ")
    print("*   * ")
    print(" ***  ")

print_alphabet_U()


# 17. Write a Python program to print the alphabet pattern 'X'.

def print_alphabet_X():
    print("*   * ")
    print("*   * ")
    print(" * *  ")
    print("  *   ")
    print(" * *  ")
    print("*   * ")
    print("*   * ")

print_alphabet_X()


# 18. Write a Python program to print the alphabet pattern 'Z'.

def print_alphabet_Z():
    print("*******")
    print("     * ")
    print("    *  ")
    print("   *   ")
    print("  *    ")
    print(" *     ")
    print("*******")

print_alphabet_Z()


# 19.Write a Python program to find the median of three values.

def find_median(num1, num2, num3):
    nums = [num1, num2, num3]
    nums.sort()
    median = nums[1]
    return median

num1 = float(input("Input first number: "))
num2 = float(input("Input second number: "))
num3 = float(input("Input third number: "))

median = find_median(num1, num2, num3)
print("The median is", median)


# 20. Write a Python program to construct the following pattern, using a nested loop number.
Expected Output:
1
22
333
4444
55555
666666
7777777
88888888
999999999

def print_number_pattern():
    for i in range(1, 10):
        for j in range(i):
            print(i, end="")
        print()

print_number_pattern()
